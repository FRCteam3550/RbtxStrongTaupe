// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016;

import org.usfirst.frc3550.RbtxStrongTaupe2016.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released  and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private Joystick gamePadPilote;
	private Joystick joystickCoPilote;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		gamePadPilote = new Joystick(0);
		joystickCoPilote = new Joystick(1);
		
		//gamePadPilote
		
		//double gamePadPiloteXaxis = gamePadPilote.getRawAxis(1);
		//double gamePadPiloteYaxis = gamePadPilote.getRawAxis(2);
		
		
		//joystickCoPilote
		
		//camera selection
		Button buttonCameraSelection = new JoystickButton(joystickCoPilote, 11);

		// Boutons bras
		Button buttonBrasMonter = new JoystickButton(joystickCoPilote, 5);
		Button buttonBrasDescendre = new JoystickButton(joystickCoPilote, 3);

		buttonBrasMonter.whenPressed(new RbtxBrasMonterCommand());
		buttonBrasDescendre.whenPressed(new RbtxBrasDescendreCommand());

		// Boutons ramasseur
		Button buttonRamasseurAspirer = new JoystickButton(joystickCoPilote, 9);
		Button buttonRamasseurEjecter = new JoystickButton(joystickCoPilote, 4);

		buttonRamasseurAspirer.whenPressed(new RbtxRamasseurAspirerCommand());
		buttonRamasseurEjecter.whileHeld(new RbtxRamasseurEjecterCommand());

		// Boutons accelerateur
		Button buttonAccelerateur = new JoystickButton(joystickCoPilote, 6);
		//Button buttonLanceurActifmin = new JoystickButton(joystickCoPilote, 7);

		buttonAccelerateur.whenPressed(new RbtxAccelerPourLancerCommand());
		//buttonLanceurActifmin.whileHeld(new RbtxLanceurCommand());
		
		// Bouton pour lancer
		Button buttonLancer = new JoystickButton(joystickCoPilote, 1);
		buttonLancer.whenPressed(new RbtxLancerCommand());
		Button buttonArretLancer = new JoystickButton(joystickCoPilote, 7);
		buttonArretLancer.whenPressed(new RbtxArreterAccelerateurCommand());

		// SmartDashboard Buttons
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		SmartDashboard.putData("ArcadeDrive", new RbtxArcadeDriveCommand());
		SmartDashboard.putData("BrasDescendre", new RbtxBrasDescendreCommand());
		SmartDashboard.putData("BrasMonter", new RbtxBrasMonterCommand());
		SmartDashboard.putData("RamasseurAspirer", new RbtxRamasseurAspirerCommand()); 
		SmartDashboard.putData("RamasseurEjecter", new RbtxRamasseurEjecterCommand());
		//SmartDashboard.putData("Accelerateur", new RbtxAccelererCommand());
		
		//SmartDashboard.putBoolean("BoutonAccelerateur", buttonAccelerateur.get());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}


	public double getgamePadPiloteX() {
		return gamePadPilote.getRawAxis(0);
	}
	
	public double getgamePadPiloteY() {
		return gamePadPilote.getRawAxis(1);
	}
	
	public Joystick getGamePadPilote() {
		return gamePadPilote;
	}

	public Joystick getJoystickCoPilote() {
		return joystickCoPilote;
	}

}

