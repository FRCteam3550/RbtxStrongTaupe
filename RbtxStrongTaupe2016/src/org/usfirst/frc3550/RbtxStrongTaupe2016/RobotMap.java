// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon moteurDeplacementAvantDroite;
    public static CANTalon moteurDeplacementAvantGauche;
    public static CANTalon moteurDeplacementArriereDroite;
    public static CANTalon moteurDeplacementArriereGauche;
    public static RobotDrive drive;
    public static Encoder encodeurDeplacementDroit_;
    public static Encoder encodeurDeplacementGauche;
    public static SpeedController moteurBras;
    public static Encoder encodeurBras;
    public static DigitalInput limitSwitchBrasHaut;
    public static DigitalInput limitSwitchbrasBas;
    public static CANTalon moteurRamasseur;
    public static DigitalInput limitSwitchRamasseur;
    public static SpeedController moteurLanceur;
    public static DigitalInput limitSwitchDetectionBallon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        moteurDeplacementAvantDroite = new CANTalon(3);
        LiveWindow.addActuator("RbtxDeplacement", "m_AvantDroite", moteurDeplacementAvantDroite);
        
        moteurDeplacementAvantGauche = new CANTalon(1);
        LiveWindow.addActuator("RbtxDeplacement", "m_AvantGauche", moteurDeplacementAvantGauche);
        
        moteurDeplacementArriereDroite = new CANTalon(4);
        LiveWindow.addActuator("RbtxDeplacement", "m_ArrriereDroite", moteurDeplacementArriereDroite);
        
        moteurDeplacementArriereGauche = new CANTalon(2);
        LiveWindow.addActuator("RbtxDeplacement", "m_ArriereGauche", moteurDeplacementArriereGauche);
        
        drive = new RobotDrive(moteurDeplacementAvantGauche, moteurDeplacementArriereGauche,
              moteurDeplacementAvantDroite, moteurDeplacementArriereDroite);
        
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setSensitivity(0.5);
        drive.setMaxOutput(1.0);

        encodeurDeplacementDroit_ = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacement", "m_EncodeurDroit", encodeurDeplacementDroit_);
        encodeurDeplacementDroit_.setDistancePerPulse(1.0);
        encodeurDeplacementDroit_.setPIDSourceType(PIDSourceType.kRate);
        encodeurDeplacementGauche = new Encoder(7, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacement", "m_EncodeurGauche", encodeurDeplacementGauche);
        encodeurDeplacementGauche.setDistancePerPulse(1.0);
        encodeurDeplacementGauche.setPIDSourceType(PIDSourceType.kRate);
        moteurBras = new Talon(7);
        LiveWindow.addActuator("RbtxBras", "m_bras", (Talon) moteurBras);
        
        encodeurBras = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxBras", "m_EncodeurBras", encodeurBras);
        encodeurBras.setDistancePerPulse(1.0);
        encodeurBras.setPIDSourceType(PIDSourceType.kRate);
        limitSwitchBrasHaut = new DigitalInput(0);
        LiveWindow.addSensor("RbtxBras", "m_LSHaut", limitSwitchBrasHaut);
        
        limitSwitchbrasBas = new DigitalInput(1);
        LiveWindow.addSensor("RbtxBras", "m_LSBas", limitSwitchbrasBas);
        
        moteurRamasseur = new CANTalon(5);
        LiveWindow.addActuator("RbtxRamasseur", "m_ramasseur", moteurRamasseur);
        
        limitSwitchRamasseur = new DigitalInput(6);
        LiveWindow.addSensor("RbtxRamasseur", "m_LSRamasseur", limitSwitchRamasseur);
        
        moteurLanceur = new Talon(6);
        LiveWindow.addActuator("RbtxLanceur", "m_lanceur", (Talon) moteurLanceur);
        
        limitSwitchDetectionBallon = new DigitalInput(9);
        LiveWindow.addSensor("RbtxLanceur", "m_DetectionBallon", limitSwitchDetectionBallon);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
