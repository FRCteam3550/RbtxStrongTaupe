// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController moteurDeplacementAvantDroite;
    public static SpeedController moteurDeplacementAvantGauche;
    public static SpeedController moteurDeplacementArriereDroite;
    public static SpeedController moteurDeplacementArriereGauche;
    public static RobotDrive drive;
    public static RobotDrive myDrive;
    public static Encoder encodeurDeplacementDroit;
    public static Encoder encodeurDeplacementGauche;
    
    public static SpeedController moteurBras;
    public static Encoder encodeurBras;
    public static DigitalInput brasEnHaut;
    public static DigitalInput brasEnBas;
    
    public static SpeedController moteurRamasseur;
    //public static DigitalInput limitSwitchRamasseur;
    
    public static SpeedController moteurAccelerateur;
    public static DigitalInput BallonPresent;
    
    public static AnalogInput forwardSonar;
    
    public static AnalogGyro gyro;
    
    public static Servo  servoPan;
    public static Servo servoTilt;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Value in inches - Valeur en pouces
    private static final double RADIUS_ROUES = 3.37512;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	// Changed for testing on robot 2015
    	//moteurDeplacementAvantDroite = new CANTalon(3);
 
        moteurDeplacementAvantDroite = new Talon(5);
        LiveWindow.addActuator("RbtxDeplacementSubsystem", "m_AvantDroite", (LiveWindowSendable)moteurDeplacementAvantDroite);
        
        // Changed for testing on robot 2015
        // moteurDeplacementAvantGauche = new CANTalon(1);
        moteurDeplacementAvantGauche = new Talon(2);
        LiveWindow.addActuator("RbtxDeplacementSubsystem", "m_AvantGauche", (LiveWindowSendable) moteurDeplacementAvantGauche);
        
        // Changed for testing on robot 2015
        //moteurDeplacementArriereDroite = new CANTalon(4);
        moteurDeplacementArriereDroite = new Talon(6);
        LiveWindow.addActuator("RbtxDeplacementSubsystem", "m_ArrriereDroite", (LiveWindowSendable) moteurDeplacementArriereDroite);
        
        // Changed for testing on robot 2015
        //moteurDeplacementArriereGauche  = new CANTalon(2);
        moteurDeplacementArriereGauche = new Talon(3);
        LiveWindow.addActuator("RbtxDeplacementSubsystem", "m_ArriereGauche", (LiveWindowSendable) moteurDeplacementArriereGauche);
        
        moteurRamasseur = new CANTalon(5);
        LiveWindow.addActuator("RbtxRamasseurSubsystem", "m_moteur", (LiveWindowSendable) moteurRamasseur);
        
       // limitSwitchRamasseur = new DigitalInput(1);
       // LiveWindow.addSensor("RbtxRamasseurSubsystem", "m_limitSwitch", limitSwitchRamasseur);
         
        // Changed for testing on robot 2015
        //moteurAccelerateur = new Talon(6);
        moteurAccelerateur = new Talon(1);
        //LiveWindow.addActuator("RbtxAccelerateurSubsystem", "m_moteur", (Talon) moteurAccelerateur);
        
        moteurBras = new Talon(7);
        //LiveWindow.addActuator("RbtxBrasSubsystem", "m_moteur", (Talon) moteurBras);
        
        drive = new RobotDrive(moteurDeplacementAvantGauche, moteurDeplacementArriereGauche,
        					   moteurDeplacementAvantDroite, moteurDeplacementArriereDroite); 
        
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setSensitivity(0.5);
        drive.setMaxOutput(1.0);

     // Circumference in ft = 4in/12(in/ft)*PI
     			//left_encoder.setDistancePerPulse((4.0/12.0*Math.PI) / 360.0);
        
        forwardSonar = new AnalogInput(3);
        LiveWindow.addSensor("RbtxDeplacementSubsystem", "forwardSonar", forwardSonar);
       
        
        gyro = new AnalogGyro(1); // change from analog 0 to analog 1
        
        encodeurDeplacementDroit = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacementSubsystem", "m_EncodeurDroit", encodeurDeplacementDroit);
       // encodeurDeplacementDroit.setDistancePerPulse(Math.PI*RADIUS_ROUES/490.0);
        encodeurDeplacementDroit.setDistancePerPulse(((3.20/12.0*Math.PI)*0.5) / 360.0);
        
        encodeurDeplacementDroit.setPIDSourceType(PIDSourceType.kRate);
        
        encodeurDeplacementGauche = new Encoder(7, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacementSubsystem", "m_EncodeurGauche", encodeurDeplacementGauche);
        encodeurDeplacementGauche.setDistancePerPulse(((3.20/12.0*Math.PI)*0.5)/ 360.0);
        encodeurDeplacementGauche.setPIDSourceType(PIDSourceType.kRate);
        
        encodeurBras = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxBrasSubsystem", "m_encodeur", encodeurBras);
        encodeurBras.setDistancePerPulse(1.0);
        encodeurBras.setPIDSourceType(PIDSourceType.kRate);
        
        brasEnHaut = new DigitalInput(0);
        LiveWindow.addSensor("RbtxBrasSubsystem", "m_brasEnHaut", brasEnHaut);
        
        brasEnBas = new DigitalInput(1);
        LiveWindow.addSensor("RbtxBrasSubsystem", "m_brasEnBas", brasEnBas);
        
        BallonPresent = new DigitalInput(6); 
        LiveWindow.addSensor("RbtxRamasseur", "m_ballDetector", BallonPresent);
        
       //to be adjusted with the available pwm channel on the actual robot
        servoPan = new Servo(8);
        servoPan = new Servo(9);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
