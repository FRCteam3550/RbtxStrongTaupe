// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon rbtxDeplacementm_AvantDroite;
    public static CANTalon rbtxDeplacementm_AvantGauche;
    public static CANTalon rbtxDeplacementm_ArrriereDroite;
    public static CANTalon rbtxDeplacementm_ArriereGauche;
    public static RobotDrive rbtxDeplacementRbtxDrive;
    public static Encoder rbtxDeplacementm_EncodeurDroit;
    public static Encoder rbtxDeplacementm_EncodeurGauche;
    public static SpeedController rbtxBrasm_bras;
    public static Encoder rbtxBrasm_EncodeurBras;
    public static DigitalInput rbtxBrasm_LSHaut;
    public static DigitalInput rbtxBrasm_LSBas;
    public static CANTalon rbtxRamasseurm_ramasseur;
    public static DigitalInput rbtxRamasseurm_LSRamasseur;
    public static SpeedController rbtxLanceurm_lanceur;
    public static DigitalInput rbtxLanceurm_DetectionBallon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rbtxDeplacementm_AvantDroite = new CANTalon(3);
        LiveWindow.addActuator("RbtxDeplacement", "m_AvantDroite", rbtxDeplacementm_AvantDroite);
        
        rbtxDeplacementm_AvantGauche = new CANTalon(1);
        LiveWindow.addActuator("RbtxDeplacement", "m_AvantGauche", rbtxDeplacementm_AvantGauche);
        
        rbtxDeplacementm_ArrriereDroite = new CANTalon(4);
        LiveWindow.addActuator("RbtxDeplacement", "m_ArrriereDroite", rbtxDeplacementm_ArrriereDroite);
        
        rbtxDeplacementm_ArriereGauche = new CANTalon(2);
        LiveWindow.addActuator("RbtxDeplacement", "m_ArriereGauche", rbtxDeplacementm_ArriereGauche);
        
        rbtxDeplacementRbtxDrive = new RobotDrive(rbtxDeplacementm_AvantGauche, rbtxDeplacementm_ArriereGauche,
              rbtxDeplacementm_AvantDroite, rbtxDeplacementm_ArrriereDroite);
        
        rbtxDeplacementRbtxDrive.setSafetyEnabled(true);
        rbtxDeplacementRbtxDrive.setExpiration(0.1);
        rbtxDeplacementRbtxDrive.setSensitivity(0.5);
        rbtxDeplacementRbtxDrive.setMaxOutput(1.0);

        rbtxDeplacementm_EncodeurDroit = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacement", "m_EncodeurDroit", rbtxDeplacementm_EncodeurDroit);
        rbtxDeplacementm_EncodeurDroit.setDistancePerPulse(1.0);
        rbtxDeplacementm_EncodeurDroit.setPIDSourceType(PIDSourceType.kRate);
        rbtxDeplacementm_EncodeurGauche = new Encoder(7, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxDeplacement", "m_EncodeurGauche", rbtxDeplacementm_EncodeurGauche);
        rbtxDeplacementm_EncodeurGauche.setDistancePerPulse(1.0);
        rbtxDeplacementm_EncodeurGauche.setPIDSourceType(PIDSourceType.kRate);
        rbtxBrasm_bras = new Talon(7);
        LiveWindow.addActuator("RbtxBras", "m_bras", (Talon) rbtxBrasm_bras);
        
        rbtxBrasm_EncodeurBras = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("RbtxBras", "m_EncodeurBras", rbtxBrasm_EncodeurBras);
        rbtxBrasm_EncodeurBras.setDistancePerPulse(1.0);
        rbtxBrasm_EncodeurBras.setPIDSourceType(PIDSourceType.kRate);
        rbtxBrasm_LSHaut = new DigitalInput(0);
        LiveWindow.addSensor("RbtxBras", "m_LSHaut", rbtxBrasm_LSHaut);
        
        rbtxBrasm_LSBas = new DigitalInput(1);
        LiveWindow.addSensor("RbtxBras", "m_LSBas", rbtxBrasm_LSBas);
        
        rbtxRamasseurm_ramasseur = new CANTalon(5);
        LiveWindow.addActuator("RbtxRamasseur", "m_ramasseur", rbtxRamasseurm_ramasseur);
        
        rbtxRamasseurm_LSRamasseur = new DigitalInput(6);
        LiveWindow.addSensor("RbtxRamasseur", "m_LSRamasseur", rbtxRamasseurm_LSRamasseur);
        
        rbtxLanceurm_lanceur = new Talon(6);
        LiveWindow.addActuator("RbtxLanceur", "m_lanceur", (Talon) rbtxLanceurm_lanceur);
        
        rbtxLanceurm_DetectionBallon = new DigitalInput(9);
        LiveWindow.addSensor("RbtxLanceur", "m_DetectionBallon", rbtxLanceurm_DetectionBallon);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
