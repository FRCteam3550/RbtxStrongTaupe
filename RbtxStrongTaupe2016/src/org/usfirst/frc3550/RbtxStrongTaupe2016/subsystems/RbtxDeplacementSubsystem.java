// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016.subsystems;

import org.usfirst.frc3550.RbtxStrongTaupe2016.OI;
import org.usfirst.frc3550.RbtxStrongTaupe2016.Robot;
import org.usfirst.frc3550.RbtxStrongTaupe2016.RobotMap;
import org.usfirst.frc3550.RbtxStrongTaupe2016.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class RbtxDeplacementSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private RobotDrive m_drive = RobotMap.drive;
    
   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
       

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
           setDefaultCommand(new RbtxArcadeDriveCommand());
    }
    
    public void stop() {
    	m_drive.drive(0, 0);
    }
    
    public void drive(Joystick stick) {
    	RobotMap.moteurDeplacementAvantGauche.setInverted(true);
    	RobotMap.moteurDeplacementArriereGauche.setInverted(true);
    	RobotMap.moteurDeplacementAvantDroite.setInverted(true);
    	RobotMap.moteurDeplacementArriereDroite.setInverted(true);
    	m_drive.arcadeDrive(stick);
    }
    
    public void inverseDrive(Joystick stick) {
    	double moveValue = Robot.oi.getgamePadPiloteY();
		double rotateValue = Robot.oi.getgamePadPiloteX();
	    RobotMap.moteurDeplacementAvantGauche.setInverted(false);
	    RobotMap.moteurDeplacementArriereGauche.setInverted(false);
	    RobotMap.moteurDeplacementAvantDroite.setInverted(false);
	    RobotMap.moteurDeplacementArriereDroite.setInverted(false);
	    m_drive.arcadeDrive(moveValue, -1* rotateValue);
    }
    
}

