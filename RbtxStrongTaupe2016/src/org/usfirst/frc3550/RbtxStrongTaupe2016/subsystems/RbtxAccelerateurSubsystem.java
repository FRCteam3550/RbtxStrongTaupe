// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016.subsystems;

import org.usfirst.frc3550.RbtxStrongTaupe2016.RobotMap;
import org.usfirst.frc3550.RbtxStrongTaupe2016.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;



/**
 * The RbtxAccelerateurSubsystem incorporates the sensors and actuators attached to
 * the robots shooter. These include only one motor.
 */
public class RbtxAccelerateurSubsystem extends Subsystem {

	
	private SpeedController m_moteur = RobotMap.moteurAccelerateur;
	//private DigitalInput m_BallonEnPlace = RobotMap.BallonPresent;

	
	private static final double VITESSE_MAXIMALE = 1;
	private static final double VITESSE_MINIMALE = 0.75;
	private static final double VITESSE_ZERO = 0;
	
	
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	/**
	 * La methode accelerVitesseMaximale permet de mettre le shooter a une vitesse optimale en vue d un tir.
	 * La vitesse est predefinie.
	 *
	 * @param Aucun argument
	 */
	public void accelererVitesseMaximale() {
			m_moteur.set(VITESSE_MAXIMALE);
	}

	/**
	 * La methode accelerVitesseMinimale permet de mettre le shooter a une vitesse minimale.
	 * La vitesse est predefinie.
	 *
	 * @param Aucun argument
	 */
	public void preparerVitesseMinimale(){
		m_moteur.set(VITESSE_MINIMALE);
	}

	/**
	 * La methode stop permet d arreter le moteur du shooter.
	 * La vitesse est predefinie.
	 *
	 * @param Aucun argument
	 */
	public void stop(){
		m_moteur.set(VITESSE_ZERO);
	}
	
	/**
	 * @return Whether or not the shooter is ready to shoot.
	 */
	public boolean accelererateurPret(){
		return (m_moteur.get() >= VITESSE_MAXIMALE);
	}
}

