// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016.subsystems;

import org.usfirst.frc3550.RbtxStrongTaupe2016.RobotMap;
import org.usfirst.frc3550.RbtxStrongTaupe2016.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * The RbtxBrasSubsystem incorporates the sensors and actuators attached to
 * the robots arm. These include one motor, one encoder and two limit Switches
 */
public class RbtxBrasSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController m_moteur = RobotMap.moteurBras;
    private final Encoder m_encodeur = RobotMap.encodeurBras;
    private final DigitalInput m_brasEnHaut = RobotMap.brasEnHaut;
    private final DigitalInput m_brasEnBas = RobotMap.brasEnBas;
    private final Servo       m_panServo     = RobotMap.servoPan;
  	private final Servo       m_TiltServo    = RobotMap.servoTilt;
    
    private static final double DIRECTION_HAUT = 1;
    private static final double DIRECTION_BAS = -1;
    private static final double VITESSE_ZERO = 0;
    private static final double VITESSE_HAUT = 0.7;
    private static final double VITESSE_BAS = 0.7;
    private static final double VITESSE_ANTI_g = 0.6;
    
    //Gestion des servos moteurs
    private static final double CAMERA_A_Gauche = 45;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
         setDefaultCommand(new RbtxBrasManuelleCommand());
    }
    
    /**
	 * La methode stop permet d immobiliser le bras.
	 * La vitesse du moteur est nulle.
	 * 
	 * @param Aucun argument
	 */
    public void stop() {
    	m_moteur.set(VITESSE_ZERO);
    }
    
    /**
   	 * La methode monter permet de monter le bras.
   	 * La vitesse est predefinie.
   	 * 
   	 * @param Aucun argument
   	 */
    public void monter() {
    	m_moteur.set(DIRECTION_HAUT*VITESSE_HAUT);
    }
    
    /**
   	 * La methode compenserLaGravitation permet d adoucir la descente du bras lors d un arret en position verticale.
   	 *La vitesse est predefinie
   	 *
   	 * @param Aucun argument
   	 */
    public void compenserLaGravitation() {
    	m_moteur.set(DIRECTION_HAUT*VITESSE_ANTI_g);
    }
    
    /**
   	 * La methode descendre permet de faire descendre le bras
   	 * La vitesse est predefinie
   	 * 
   	 * @param Aucun argument
   	 */
    public void descendre() {
    	m_moteur.set(DIRECTION_BAS*VITESSE_BAS);
    }
    
    /**
   	 * La methode manipulerManuel permet d operer le bras a l aide de joystick. Elle a ete demandee par Mike.
   	 * 
   	 * @param VITESSE_From_AXIS dans lintervalle [-1.0..1.0]
   	 */
    public void manipulerManuel(double VITESSE_From_AXIS) {
    	m_moteur.set(VITESSE_From_AXIS);
    }
    
    /**
   	 * La methode tourneCameraGauche permet de tourner le servo moteur pan vers la gauche.
   	 * 
   	 * @param Aucun
   	 */
    public void tourneCameraPan(double anglePan) {
    	m_panServo.setAngle(anglePan);
    }
    
    /**
   	 * La methode tourneCameraGauche permet de tourner le servo moteur pan vers la gauche.
   	 * 
   	 * @param Aucun
   	 */
    public void tourneCameraTilt(double angleTilt) {
    	m_TiltServo.setAngle(angleTilt);
    }
    
    
    /**
   	 * La methode tourneCameraGauche permet de tourner le servo moteur pan vers la gauche.
   	 * 
   	 * @param Aucun
   	 */
    public void stopCamera() {
    	m_panServo.setAngle(0);
    }
    
    /**
	 * @return Whether or not the arm is at its highest position.
	 */
    public boolean isTooHigh(){
    	return  !m_brasEnHaut.get();
    }
    
    /**
   	 * @return Whether or not the arm is at its lowest position.
   	 */
    public boolean isTooLow(){
    	return m_brasEnBas.get();
    }
    
    /**
   	 * @return Whether or not the arm is at its lowest position or its highest position.
   	 */
    public boolean reachedEnd(){
    	return ((!m_brasEnHaut.get())||( m_brasEnBas.get()));
    }   
       
}

