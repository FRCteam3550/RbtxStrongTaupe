// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.RbtxStrongTaupe2016;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.AxisCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;

import org.usfirst.frc3550.RbtxStrongTaupe2016.commands.*;
import org.usfirst.frc3550.RbtxStrongTaupe2016.subsystems.*;

import com.ni.vision.NIVision.Image;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static RbtxDeplacementSubsystem deplacement;
	public static RbtxBrasSubsystem bras;
	public static RbtxRamasseurSubsystem ramasseur;
	public static RbtxAccelerateurSubsystem accelerateur;
	
	SendableChooser autoSelecteur;
	
    CameraServer  usbCamera;
	
	Image frame;
    AxisCamera axisCamera;
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		deplacement = new RbtxDeplacementSubsystem();
		bras = new RbtxBrasSubsystem();
		ramasseur = new RbtxRamasseurSubsystem();
		accelerateur = new RbtxAccelerateurSubsystem();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		//(which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		autoSelecteur = new SendableChooser();

		//autonomousCommand = new AutonomousCommand();
		
    	autoSelecteur.addDefault("->Robotronix Ne fais rien", new RbtxNeFaitRienCommand());
        autoSelecteur.addObject("->Bras en haut", new RbtxBrasMonterCommand());
        SmartDashboard.putData("Selection Autonomes", autoSelecteur);
        
        axisCamera = new AxisCamera("axis-camera.local");
        usbCamera = CameraServer.getInstance();
        usbCamera.setQuality(30);
        //the camera name (ex "cam0") can be found through the roborio web interface
        usbCamera.startAutomaticCapture("cam0");
        //axisCamera.getImage(frame);
         

       // CameraServer.getInstance().setImage(frame);

	}

	/**
	 * This function is called when the disabled button is hit.
	 * You can use it to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		autonomousCommand = (Command) autoSelecteur.getSelected();
		if (autonomousCommand != null) autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		RobotMap.encodeurDeplacementDroit.reset();
		RobotMap.encodeurDeplacementGauche.reset();
		RobotMap.encodeurBras.reset();
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		// cameraToggle();
		 
           
		//SmartDashboard.putNumber("gamePadPiloteXaxis: ", Robot.oi.getgamePadPiloteX());
		//SmartDashboard.putNumber("gamePadPiloteYaxis: ", Robot.oi.getgamePadPiloteY());
		
		//SmartDashboard.putNumber("JoystickCoPiloteYaxis: ", Robot.oi.joystickCoPilote.getY());
		
		//SmartDashboard.putBoolean("BoutonAccelerateur: ", Robot.oi.joystickCoPilote.getRawButton(6));
		SmartDashboard.putBoolean("BrasEnBas: ", (RobotMap.brasEnBas.get()));
		SmartDashboard.putBoolean("BrasEnHaut: ", !RobotMap.brasEnHaut.get());
		SmartDashboard.putBoolean("BallonPresent: ", RobotMap.BallonPresent.get());
		
		SmartDashboard.putNumber("Angle Encodeur Bras: ", (RobotMap.encodeurBras.getRaw()* 490.0 / 360.0));
		
		SmartDashboard.putNumber("Encodeur Deplacement Droit: ", RobotMap.encodeurDeplacementDroit.getDistance());
		SmartDashboard.putNumber("Encodeur Deplacement Gauche: ", RobotMap.encodeurDeplacementGauche.getDistance());
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
	
	public void cameraToggle(){ 
		
		    CameraServer camera0 = CameraServer.getInstance();
        	 camera0.setQuality(10);
        	 CameraServer camera1 = CameraServer.getInstance();
             camera1.setQuality(10);
             
		 
         if(Robot.oi.getJoystickCoPilote().getRawButton(11) == true){
        	
        	 camera0.startAutomaticCapture("cam0"); 
        	 }
         
          else{
           // camera0.;  
            camera1.startAutomaticCapture("cam1");
         }
		
	}
}
